"""
Copyright 2017-2024 SensiML Corporation

This file is part of SensiML™ Piccolo AI™.

SensiML Piccolo AI is free software: you can redistribute it and/or
modify it under the terms of the GNU Affero General Public License
as published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

SensiML Piccolo AI is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public
License along with SensiML Piccolo AI. If not, see <https://www.gnu.org/licenses/>.
"""


import copy

import numpy as np
import pandas as pd
import pytest

import library.core_functions_python.vector_separation_filtering as vsf


class TestVectorSeparationFiltering:
    """Test First and Second Derivative functions."""

    @pytest.fixture(autouse=True)
    def setup(self):
        self.data = self._create_data()
        self.label_column = "Label"
        self.group_columns = ["Label", "Subject", "Segregate"]
        self.segregate_list = ["core", "edge"]
        self.config_num = 5

        self.config = {
            "norm": "Lsup",  # Lsup, L1
            "frame_AIF": 8,
            "outlier_boundry": 10,
            "small_nv": 1,
            "medium_nv": 2,
            "large_nv": 4,
        }

        list_val = [
            [10, 55, "blue"],
            [25, 55, "blue"],
            [40, 50, "blue"],
            [40, 55, "blue"],
            [40, 60, "blue"],
            [45, 50, "blue"],
            [45, 55, "blue"],
            [45, 60, "blue"],
            [50, 50, "blue"],
            [50, 55, "blue"],
            [50, 60, "blue"],
            [55, 50, "red"],
            [55, 55, "red"],
            [55, 60, "red"],
        ]

        self.train_set = pd.DataFrame(list_val, columns=["f1", "f2", "Label"])

    def _create_data(self):

        train_set = pd.DataFrame([], columns=["Subject", "f1", "f2", "Label"])
        train_set["Subject"] = [
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
            "U000",
        ]

        train_set["f1"] = [
            0,
            50,
            75,
            33,
            71,
            87,
            50,
            61,
            66,
            86,
            63,
            58,
            43,
            86,
            60,
            61,
            57,
            44,
            91,
            77,
            60,
            39,
            60,
            41,
            87,
            42,
            85,
            36,
            68,
            77,
            52,
            84,
            58,
            47,
            44,
            62,
            54,
            53,
            95,
            51,
            30,
            64,
            93,
            35,
            84,
            58,
            80,
            89,
            49,
            74,
            61,
            70,
            61,
            62,
            80,
            62,
            43,
            41,
            31,
            31,
            44,
            35,
            67,
            80,
            83,
            90,
            74,
            56,
            45,
            66,
            32,
            32,
            70,
            78,
            71,
            82,
            37,
            32,
            72,
            82,
            53,
            31,
            63,
            47,
            83,
            94,
            35,
            74,
            79,
            96,
            85,
            45,
            58,
            47,
            83,
            74,
            85,
            78,
            32,
            51,
            53,
            8,
            53,
            39,
            39,
            33,
            11,
            24,
            64,
            36,
            64,
            68,
            65,
            32,
            41,
            12,
            6,
            69,
            49,
            24,
            56,
            18,
            46,
            48,
            14,
            69,
            64,
            68,
            53,
            52,
            37,
            8,
            64,
            55,
            65,
            5,
            56,
            26,
            52,
            22,
            54,
            43,
            51,
            51,
            31,
            26,
            67,
            66,
            0,
            52,
            44,
            11,
            40,
            14,
            58,
            16,
            60,
            26,
            44,
            11,
            63,
            15,
            38,
            7,
            5,
            28,
            11,
            51,
            27,
            21,
            31,
            69,
            58,
            58,
            47,
            31,
            50,
            37,
            24,
            9,
            7,
            28,
            68,
            58,
            5,
            7,
            47,
            10,
            32,
            25,
            65,
            48,
            27,
            61,
            29,
            65,
            59,
            47,
            48,
            21,
            81,
            95,
            63,
            82,
            57,
            88,
            89,
            51,
            73,
            61,
            50,
            54,
            99,
            54,
            90,
            57,
            65,
            70,
            51,
            91,
            68,
            64,
            62,
            82,
            56,
            77,
            74,
            64,
            85,
            82,
            59,
            64,
            96,
            79,
            87,
            73,
            57,
            57,
            56,
            53,
            99,
            51,
            63,
            65,
            88,
            79,
            69,
            60,
            92,
            69,
            86,
            69,
            59,
            58,
            59,
            92,
            65,
            58,
            86,
            83,
            78,
            53,
            93,
            61,
            69,
            74,
            78,
            64,
            86,
            81,
            98,
            89,
            53,
            94,
            78,
            50,
            81,
            88,
            96,
            67,
            69,
            67,
            99,
            60,
            83,
            55,
            86,
            76,
            63,
            76,
            89,
            73,
            52,
            85,
            96,
            61,
            66,
            55,
            64,
            63,
            76,
            59,
            86,
            86,
            59,
            88,
            66,
            72,
            82,
            82,
            62,
            84,
            57,
            65,
            76,
            70,
            80,
            78,
            85,
            86,
            76,
            50,
            81,
            64,
            59,
            62,
            70,
            71,
            87,
            61,
            87,
            53,
            73,
            53,
            79,
            65,
            64,
            79,
            88,
            73,
            88,
            84,
            63,
            61,
            70,
            63,
            56,
            78,
            78,
            89,
            62,
            51,
            87,
            89,
            62,
            56,
            67,
            81,
            66,
            81,
            50,
            52,
            71,
            87,
            63,
            55,
            75,
            89,
            66,
            62,
            29,
            20,
            10,
            34,
            49,
            27,
            19,
            33,
            34,
            10,
            27,
            36,
            16,
            11,
            5,
            13,
            30,
            32,
            38,
            13,
            39,
            49,
            26,
            41,
            8,
            40,
            36,
            9,
            38,
            10,
            15,
            15,
            48,
            21,
            38,
            26,
            35,
            28,
            45,
            39,
            26,
            12,
            36,
            22,
            23,
            40,
            18,
            36,
            36,
            48,
            49,
            17,
            21,
            30,
            41,
            7,
            34,
            29,
            43,
            15,
            20,
            28,
            19,
            38,
            32,
            31,
            26,
            37,
            7,
            21,
            96,
            83,
            93,
            84,
            92,
            89,
            98,
            86,
            90,
            96,
            99,
            80,
            72,
            71,
            74,
            99,
            96,
            88,
            88,
            86,
            75,
            88,
            76,
            88,
            93,
            88,
            99,
            71,
            81,
            79,
            90,
            78,
            87,
            93,
            76,
            91,
            85,
            72,
            99,
            92,
            85,
            99,
            95,
            80,
            79,
            75,
            79,
            86,
            73,
            92,
            84,
            85,
            72,
            78,
            97,
            74,
            81,
            82,
            74,
            93,
            70,
            85,
            87,
            95,
            95,
            94,
            82,
            85,
            80,
            97,
            82,
            56,
            88,
            65,
            58,
            84,
            84,
            50,
            84,
            66,
            88,
            76,
            64,
            75,
            56,
            53,
            69,
            72,
            83,
            84,
            61,
            62,
            65,
            55,
            70,
            53,
            70,
            50,
            52,
            80,
            53,
            72,
            82,
            82,
            54,
            59,
            74,
            64,
            69,
            59,
            53,
            62,
            53,
            61,
            57,
            77,
            78,
            89,
            89,
            80,
            60,
            88,
            82,
            56,
            57,
            54,
            66,
            83,
            64,
            70,
            69,
            71,
            78,
            78,
            89,
            67,
            83,
            60,
            70,
            77,
            48,
            45,
            38,
            37,
            27,
            26,
            45,
            17,
            9,
            7,
            28,
            26,
            7,
            38,
            9,
            6,
            11,
            17,
            25,
            46,
            21,
            48,
            10,
            26,
            42,
            5,
            8,
            24,
            49,
            35,
            16,
            25,
            29,
            33,
            49,
            35,
            27,
            45,
            30,
            19,
            25,
            35,
            39,
            14,
            33,
            42,
            11,
            5,
            31,
            39,
            39,
            24,
            33,
            49,
            44,
            27,
            15,
            40,
            49,
            24,
            13,
            42,
            31,
            7,
            36,
            18,
            5,
            6,
            22,
            38,
            77,
            84,
            97,
            73,
            79,
            79,
            85,
            83,
            85,
            71,
            89,
            95,
            77,
            80,
            86,
            94,
            98,
            99,
            93,
            93,
            88,
            92,
            74,
            83,
            98,
            82,
            86,
            91,
            76,
            80,
            71,
            82,
            77,
            75,
            84,
            91,
            76,
            72,
            82,
            88,
            72,
            77,
            95,
            78,
            72,
            85,
            86,
            73,
            78,
            81,
            97,
            78,
            93,
            91,
            78,
            93,
            88,
            75,
            83,
            99,
            83,
            74,
            76,
            71,
            93,
            70,
            83,
            92,
            71,
            93,
            80,
            63,
            85,
            56,
            88,
            56,
            75,
            68,
            50,
            59,
            52,
            61,
            60,
            74,
            83,
            75,
            80,
            82,
            60,
            55,
            83,
            86,
            86,
            57,
            69,
            88,
            54,
            64,
            80,
            59,
            82,
            72,
            81,
            80,
            84,
            59,
            53,
            76,
            56,
            66,
            53,
            51,
            78,
            88,
            52,
            57,
            52,
            72,
            75,
            77,
            64,
            62,
            65,
            78,
            75,
            52,
            84,
            85,
            55,
            76,
            89,
            86,
            52,
            89,
            82,
            56,
            82,
            58,
            64,
            74,
            44,
            38,
            18,
            48,
            42,
            15,
            29,
            48,
            45,
            8,
            45,
            21,
            45,
            19,
            25,
            17,
            20,
            40,
            12,
            48,
            9,
            26,
            37,
            29,
            22,
            34,
            25,
            49,
            17,
            44,
            25,
            40,
            29,
            38,
            39,
            27,
            11,
            47,
            29,
            8,
            34,
            28,
            29,
            31,
            23,
            13,
            12,
            10,
            47,
            18,
            34,
            29,
            30,
            22,
            5,
            6,
            23,
            20,
            9,
            37,
            35,
            8,
            30,
            28,
            32,
            9,
            7,
            45,
            25,
            34,
            96,
            87,
            76,
            97,
            74,
            94,
            96,
            70,
            93,
            83,
            74,
            82,
            98,
            80,
            93,
            95,
            79,
            98,
            71,
            71,
            98,
            71,
            92,
            92,
            94,
            99,
            88,
            98,
            98,
            90,
            93,
            98,
            70,
            82,
            96,
            76,
            99,
            79,
            78,
            74,
            84,
            97,
            80,
            90,
            73,
            70,
            96,
            70,
            92,
            87,
            95,
            79,
            94,
            84,
            93,
            89,
            87,
            77,
            82,
            89,
            97,
            89,
            92,
            79,
            74,
            73,
            81,
            95,
            75,
            93,
        ]
        train_set["f2"] = [
            99,
            34,
            77,
            51,
            74,
            56,
            89,
            31,
            78,
            35,
            72,
            67,
            87,
            56,
            96,
            83,
            88,
            69,
            33,
            43,
            60,
            53,
            41,
            86,
            75,
            73,
            75,
            88,
            30,
            62,
            97,
            94,
            69,
            93,
            53,
            41,
            67,
            63,
            36,
            99,
            68,
            76,
            88,
            67,
            46,
            85,
            33,
            75,
            97,
            33,
            96,
            95,
            47,
            77,
            63,
            50,
            32,
            36,
            40,
            88,
            69,
            86,
            78,
            72,
            59,
            74,
            98,
            83,
            75,
            82,
            39,
            79,
            32,
            56,
            74,
            98,
            60,
            52,
            46,
            65,
            48,
            56,
            74,
            61,
            43,
            82,
            40,
            57,
            53,
            92,
            37,
            61,
            80,
            86,
            40,
            85,
            59,
            46,
            38,
            82,
            60,
            66,
            47,
            48,
            4,
            33,
            11,
            28,
            56,
            46,
            55,
            2,
            15,
            65,
            63,
            2,
            25,
            43,
            16,
            1,
            56,
            64,
            33,
            49,
            51,
            23,
            37,
            60,
            51,
            52,
            68,
            15,
            61,
            2,
            29,
            63,
            51,
            11,
            45,
            53,
            46,
            43,
            9,
            28,
            66,
            8,
            13,
            41,
            24,
            49,
            61,
            42,
            42,
            61,
            8,
            38,
            56,
            4,
            47,
            45,
            41,
            35,
            65,
            44,
            23,
            59,
            55,
            23,
            24,
            15,
            13,
            22,
            25,
            16,
            8,
            54,
            56,
            32,
            4,
            50,
            63,
            22,
            12,
            40,
            13,
            37,
            18,
            62,
            5,
            24,
            5,
            28,
            62,
            66,
            57,
            30,
            69,
            51,
            64,
            40,
            14,
            16,
            6,
            36,
            17,
            3,
            27,
            33,
            40,
            6,
            14,
            26,
            29,
            46,
            31,
            25,
            49,
            22,
            26,
            19,
            41,
            27,
            23,
            2,
            1,
            17,
            17,
            25,
            3,
            39,
            39,
            9,
            32,
            39,
            44,
            33,
            20,
            12,
            11,
            30,
            13,
            23,
            33,
            32,
            25,
            17,
            31,
            2,
            14,
            11,
            37,
            31,
            4,
            5,
            12,
            31,
            35,
            1,
            18,
            0,
            24,
            40,
            45,
            42,
            44,
            27,
            45,
            4,
            21,
            20,
            6,
            35,
            28,
            49,
            46,
            16,
            29,
            38,
            44,
            38,
            2,
            16,
            45,
            23,
            48,
            24,
            40,
            26,
            25,
            17,
            20,
            41,
            36,
            3,
            16,
            3,
            4,
            24,
            20,
            13,
            63,
            68,
            76,
            61,
            65,
            86,
            53,
            63,
            55,
            54,
            80,
            70,
            87,
            71,
            66,
            54,
            67,
            79,
            66,
            60,
            81,
            58,
            74,
            69,
            71,
            74,
            88,
            62,
            86,
            60,
            71,
            65,
            82,
            88,
            83,
            73,
            55,
            73,
            70,
            72,
            67,
            81,
            75,
            83,
            81,
            71,
            50,
            52,
            82,
            61,
            58,
            55,
            75,
            74,
            87,
            57,
            53,
            73,
            58,
            73,
            75,
            61,
            87,
            59,
            78,
            77,
            75,
            80,
            54,
            72,
            38,
            35,
            41,
            21,
            13,
            39,
            32,
            26,
            45,
            47,
            16,
            22,
            23,
            34,
            17,
            7,
            14,
            31,
            28,
            9,
            18,
            31,
            28,
            41,
            34,
            41,
            47,
            46,
            46,
            35,
            33,
            12,
            5,
            22,
            40,
            26,
            32,
            29,
            23,
            6,
            18,
            17,
            28,
            18,
            23,
            41,
            26,
            10,
            25,
            5,
            9,
            39,
            25,
            32,
            11,
            12,
            34,
            42,
            44,
            44,
            20,
            17,
            19,
            8,
            37,
            22,
            24,
            49,
            24,
            11,
            20,
            26,
            29,
            28,
            26,
            35,
            41,
            17,
            45,
            39,
            70,
            26,
            48,
            27,
            34,
            41,
            45,
            23,
            42,
            48,
            15,
            11,
            15,
            11,
            21,
            30,
            39,
            49,
            40,
            31,
            20,
            40,
            37,
            15,
            32,
            49,
            20,
            47,
            28,
            13,
            10,
            29,
            49,
            43,
            22,
            39,
            26,
            18,
            47,
            32,
            49,
            48,
            13,
            27,
            46,
            41,
            44,
            49,
            12,
            18,
            46,
            38,
            44,
            20,
            38,
            13,
            24,
            36,
            49,
            37,
            61,
            59,
            64,
            55,
            78,
            77,
            88,
            53,
            79,
            82,
            75,
            64,
            87,
            76,
            82,
            83,
            77,
            69,
            57,
            71,
            87,
            87,
            85,
            62,
            78,
            72,
            79,
            83,
            76,
            54,
            76,
            50,
            58,
            68,
            55,
            81,
            80,
            73,
            88,
            82,
            77,
            68,
            53,
            57,
            88,
            66,
            70,
            63,
            86,
            78,
            79,
            56,
            54,
            63,
            65,
            83,
            57,
            85,
            63,
            80,
            78,
            51,
            55,
            71,
            84,
            56,
            65,
            52,
            89,
            55,
            49,
            42,
            38,
            49,
            36,
            22,
            8,
            22,
            39,
            30,
            21,
            30,
            32,
            10,
            14,
            29,
            48,
            13,
            14,
            26,
            49,
            31,
            17,
            49,
            25,
            37,
            19,
            28,
            43,
            31,
            19,
            46,
            19,
            38,
            34,
            25,
            29,
            18,
            25,
            25,
            32,
            18,
            15,
            32,
            11,
            6,
            14,
            40,
            26,
            43,
            48,
            7,
            49,
            43,
            9,
            17,
            37,
            49,
            28,
            11,
            22,
            13,
            19,
            48,
            48,
            17,
            46,
            40,
            28,
            20,
            46,
            36,
            12,
            23,
            41,
            46,
            12,
            35,
            12,
            18,
            32,
            30,
            35,
            42,
            42,
            11,
            18,
            35,
            42,
            39,
            20,
            46,
            32,
            42,
            35,
            29,
            23,
            12,
            37,
            35,
            45,
            48,
            13,
            36,
            17,
            31,
            32,
            44,
            32,
            19,
            43,
            41,
            19,
            45,
            10,
            10,
            10,
            26,
            17,
            33,
            12,
            36,
            22,
            47,
            34,
            21,
            31,
            22,
            43,
            42,
            35,
            23,
            39,
            16,
            28,
            43,
            26,
            15,
            22,
            45,
            67,
            66,
            58,
            66,
            87,
            62,
            75,
            72,
            50,
            80,
            73,
            84,
            64,
            82,
            54,
            85,
            83,
            52,
            86,
            82,
            54,
            83,
            66,
            64,
            61,
            78,
            69,
            69,
            52,
            65,
            69,
            53,
            64,
            62,
            53,
            58,
            88,
            89,
            87,
            75,
            81,
            83,
            64,
            72,
            57,
            79,
            83,
            83,
            52,
            60,
            83,
            80,
            67,
            84,
            68,
            55,
            85,
            71,
            83,
            84,
            53,
            53,
            63,
            52,
            52,
            60,
            69,
            65,
            78,
            51,
            49,
            26,
            22,
            49,
            35,
            32,
            6,
            25,
            9,
            24,
            17,
            41,
            15,
            42,
            37,
            35,
            21,
            43,
            47,
            19,
            10,
            41,
            45,
            37,
            39,
            28,
            16,
            8,
            6,
            29,
            17,
            45,
            21,
            16,
            19,
            42,
            49,
            31,
            8,
            22,
            40,
            32,
            45,
            5,
            28,
            36,
            8,
            14,
            31,
            47,
            13,
            24,
            9,
            25,
            34,
            12,
            12,
            42,
            14,
            18,
            33,
            46,
            18,
            23,
            43,
            40,
            18,
            25,
            28,
            25,
            25,
            46,
            20,
            29,
            43,
            28,
            25,
            48,
            11,
            16,
            16,
            12,
            11,
            11,
            10,
            13,
            40,
            17,
            48,
            48,
            34,
            37,
            31,
            30,
            17,
            17,
            46,
            15,
            39,
            42,
            49,
            13,
            25,
            12,
            38,
            39,
            21,
            29,
            43,
            47,
            12,
            16,
            44,
            34,
            32,
            36,
            44,
            21,
            26,
            14,
            13,
            26,
            34,
            46,
            10,
            38,
            22,
            41,
            28,
            12,
            44,
            36,
            47,
            43,
            48,
            31,
            19,
            23,
            43,
            15,
        ]
        train_set["Label"] = [
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "blue",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
            "green",
        ]

        return train_set

    def test_dist_computation_Lsup(self):
        test_value = np.array(
            vsf.create_dist_df("Lsup", self.data.loc[range(5)], self.group_columns)
        )
        gr_value = np.array(
            [
                [0.0, 65.0, 75.0, 48.0, 71.0],
                [65.0, 0.0, 43.0, 17.0, 40.0],
                [75.0, 43.0, 0.0, 42.0, 4.0],
                [48.0, 17.0, 42.0, 0.0, 38.0],
                [71.0, 40.0, 4.0, 38.0, 0.0],
            ]
        )
        assert (
            test_value == gr_value
        ).all(), "!!! Dist computation does not match with ground truth results for norm(Lsup)"

    def test_dist_computation_L1(self):
        test_value = np.array(
            vsf.create_dist_df("L1", self.data.loc[range(5)], self.group_columns)
        )
        gr_value = np.array(
            [
                [0.0, 115.0, 97.0, 81.0, 96.0],
                [115.0, 0.0, 68.0, 34.0, 61.0],
                [97.0, 68.0, 0.0, 68.0, 7.0],
                [81.0, 34.0, 68.0, 0.0, 61.0],
                [96.0, 61.0, 7.0, 61.0, 0.0],
            ]
        )

        assert (
            test_value == gr_value
        ).all(), (
            "!!! Dist computation does not match with ground truth results for norm(L1)"
        )

    def test_segregate(self):
        dist_df = vsf.create_dist_df(self.config["norm"], self.data, self.group_columns)
        segregate_list = [
            vsf.find_category_of_the_vector(
                dist_df, self.config, self.data, self.label_column, i
            )
            for i in self.data.index
        ]
        gr_segregate_list = [
            "outlier",
            "edge",
            "core",
            "border",
            "core",
            "border",
            "core",
            "edge",
            "core",
            "border",
            "edge",
            "border",
            "core",
            "border",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "edge",
            "border",
            "core",
            "edge",
            "edge",
            "edge",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "edge",
            "edge",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "core",
            "edge",
            "border",
            "edge",
            "core",
            "border",
            "core",
            "core",
            "border",
            "edge",
            "edge",
            "border",
            "edge",
            "border",
            "edge",
            "core",
            "core",
            "core",
            "core",
            "edge",
            "core",
            "core",
            "core",
            "border",
            "edge",
            "edge",
            "border",
            "core",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "edge",
            "core",
            "border",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "edge",
            "border",
            "core",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "edge",
            "border",
            "core",
            "border",
            "border",
            "core",
            "edge",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "edge",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "edge",
            "core",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "edge",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "border",
            "core",
            "core",
            "core",
            "edge",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "edge",
            "edge",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "edge",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "edge",
            "border",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "edge",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "edge",
            "core",
            "edge",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "edge",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "edge",
            "outlier",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "core",
            "core",
            "border",
            "border",
            "edge",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "edge",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "edge",
            "core",
            "border",
            "border",
            "border",
            "edge",
            "core",
            "border",
            "border",
            "border",
            "core",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "edge",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "core",
            "core",
            "border",
            "border",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "border",
            "edge",
            "core",
            "border",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "border",
            "core",
            "border",
            "core",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "core",
            "core",
            "edge",
            "border",
            "core",
            "border",
            "border",
            "border",
            "edge",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "core",
            "border",
            "border",
            "border",
            "border",
            "edge",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "border",
            "edge",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "border",
            "core",
            "core",
            "border",
            "edge",
            "core",
            "border",
            "core",
            "edge",
            "core",
            "border",
            "core",
            "core",
            "edge",
            "core",
            "border",
            "core",
            "border",
            "border",
            "border",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "edge",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "core",
            "core",
            "border",
            "edge",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "border",
            "edge",
            "edge",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "border",
            "core",
            "core",
            "core",
            "core",
            "core",
            "border",
            "core",
            "border",
            "border",
            "edge",
            "border",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
            "edge",
            "border",
            "border",
            "core",
            "border",
            "core",
            "edge",
            "border",
            "core",
            "border",
            "border",
            "border",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "core",
            "border",
            "core",
            "core",
            "core",
            "edge",
            "edge",
            "border",
            "core",
            "border",
            "core",
            "border",
            "edge",
            "core",
            "core",
            "border",
            "border",
            "border",
            "border",
            "border",
            "core",
            "core",
            "border",
            "core",
        ]

        assert (
            segregate_list == gr_segregate_list
        ), "!!! Segregate labels do not match with ground truth results."

    def test_outlier(self):
        config = copy.deepcopy(self.config)
        groud_true_list = [
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "edge",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "edge",
                    "edge",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
        ]

        for k, norm in enumerate(["L1", "Lsup"]):
            config["norm"] = norm
            for j, ob in enumerate([15, 25, 35]):
                config["outlier_boundry"] = ob
                dist_df = vsf.create_dist_df(
                    config["norm"], self.train_set, self.group_columns
                )
                segregate_list = [
                    vsf.find_category_of_the_vector(
                        dist_df, config, self.train_set, self.label_column, i
                    )
                    for i in self.train_set.index
                ]

                assert segregate_list == groud_true_list[k][j], (
                    "!!! test_outlier do not match with ground truth results for "
                    + norm
                    + " distance"
                )

    def test_frame(self):
        config = copy.deepcopy(self.config)
        groud_true_list = [
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "core",
                    "core",
                    "core",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "core",
                    "core",
                    "core",
                    "border",
                    "border",
                    "border",
                    "border",
                    "border",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
        ]

        for k, norm in enumerate(["L1", "Lsup"]):
            config["norm"] = norm
            for j, vr in enumerate([5, 10, 15]):
                config["frame_AIF"] = vr
                dist_df = vsf.create_dist_df(
                    config["norm"], self.train_set, self.group_columns
                )
                segregate_list = [
                    vsf.find_category_of_the_vector(
                        dist_df, config, self.train_set, self.label_column, i
                    )
                    for i in self.train_set.index
                ]

                assert segregate_list == groud_true_list[k][j], (
                    "!!! test_frame do not match with ground truth results for "
                    + norm
                    + " distance"
                )

    def test_large_nv(self):
        config = copy.deepcopy(self.config)
        groud_true_list = [
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "core",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "core",
                    "edge",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
        ]

        for k, norm in enumerate(["L1", "Lsup"]):
            config["norm"] = norm
            for j, vr in enumerate([3, 7, 10]):
                config["large_nv"] = vr
                dist_df = vsf.create_dist_df(
                    config["norm"], self.train_set, self.group_columns
                )
                segregate_list = [
                    vsf.find_category_of_the_vector(
                        dist_df, config, self.train_set, self.label_column, i
                    )
                    for i in self.train_set.index
                ]

                assert segregate_list == groud_true_list[k][j], (
                    "!!! test_large_nv do not match with ground truth results for "
                    + norm
                    + " distance"
                )

    def test_medium_nv(self):
        config = copy.deepcopy(self.config)
        groud_true_list = [
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "border",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
        ]

        for k, norm in enumerate(["L1", "Lsup"]):
            config["norm"] = norm
            for j, vr in enumerate([2, 3]):
                config["medium_nv"] = vr
                dist_df = vsf.create_dist_df(
                    config["norm"], self.train_set, self.group_columns
                )
                segregate_list = [
                    vsf.find_category_of_the_vector(
                        dist_df, config, self.train_set, self.label_column, i
                    )
                    for i in self.train_set.index
                ]

                assert segregate_list == groud_true_list[k][j], (
                    "!!! medium__nv do not match with ground truth results for "
                    + norm
                    + " distance"
                )

    def test_small_nv(self):
        config = {
            "norm": "Lsup",  # Lsup, L1
            "frame_AIF": 10,
            "outlier_boundry": 15,
            "small_nv": 1,
            "medium_nv": 3,
            "large_nv": 4,
        }

        groud_true_list = [
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
            [
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
                [
                    "outlier",
                    "outlier",
                    "edge",
                    "core",
                    "edge",
                    "core",
                    "core",
                    "core",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                    "edge",
                ],
            ],
        ]

        for k, norm in enumerate(["L1", "Lsup"]):
            config["norm"] = norm
            for j, vr in enumerate([1, 2]):
                config["small_nv"] = vr
                dist_df = vsf.create_dist_df(
                    config["norm"], self.train_set, self.group_columns
                )
                segregate_list = [
                    vsf.find_category_of_the_vector(
                        dist_df, config, self.train_set, self.label_column, i
                    )
                    for i in self.train_set.index
                ]

                assert segregate_list == groud_true_list[k][j], (
                    "!!! small__nv do not match with ground truth results for "
                    + norm
                    + " distance"
                )
